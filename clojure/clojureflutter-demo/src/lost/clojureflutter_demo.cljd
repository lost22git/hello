(ns lost.clojureflutter-demo
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/foundation.dart" :refer [kDebugMode]]
            ["package:easy_refresh/easy_refresh.dart" :as er]
            ["package:go_router/go_router.dart" :refer [GoRouter GoRoute GoRouterState]]
            ["package:restart_app/restart_app.dart" :refer [Restart]]
            [lost.test-text :as tt]
            [lost.util :refer [log vec-del goto pushto]]
            [cljd.flutter :as f]))

(defonce app-name "ClojureDart Flutter Demo")

(defonce ^:private router
  (GoRouter
   .debugLogDiagnostics true
   .routes
   [(GoRoute
     .path "/"
     .builder (fn [cx state] (home-page)))
    (GoRoute
     .path "/podcast/:title"
     .builder
     (fn [cx ^GoRouterState state]
       (podcast-detail-page (.-extra state))))]))

;;-------;;
;; state ;;
;;-------;;

(defonce ^:private app-state (atom {:theme-mode m/ThemeMode.light}))
(defonce ^:private navibar-state (atom {:current-index 0}))
(defonce ^:private podcast-list-state (atom {:data []}))

;;---------------;;
;; state updater ;;
;;---------------;;

(defn compute-theme-mode
  "Compute theme mode by given theme mode"
  [mode]
  (condp = mode
    m/ThemeMode.dark m/ThemeMode.light
    m/ThemeMode.light m/ThemeMode.dark))

(defn switch-theme-mode
  "Switch theme mode"
  [current-mode]
  (swap! app-state assoc :theme-mode (compute-theme-mode current-mode)))

(defn navibar-switch-index
  "Switch navibar by index"
  [current-index]
  (swap! navibar-state assoc  :current-index current-index))

(defn podcast-list-del
  "Delete podcast by index from data"
  [data index]
  (swap! podcast-list-state assoc :data (vec-del data index)))

(defn podcast-list-refresh-data
  "Refresh podcast list data"
  []
  (let [data (podcast-list-fetch-data)]
    (swap! podcast-list-state assoc :data data)))

(defn podcast-list-fetch-data
  "Fetching podcast list data"
  []
  (->> (range) (take 40)
       (map (fn [i]
              {:rss "http://rss.lizhi.fm/rss/14275.xml"
               :image tt/image
               :title "大内密谈"
               :author "大内密谈"
               :description tt/podcast-description}))
       (into [])))

(defn episode-list-fetch-data
  [rss]
  (log "[episode-list-fetch-data]" ":rss" rss)
  (->> (range) (take 40)
       (map (fn [i]
              {:title (str "ep" i)
               :pubDate "now"
               :duration "30min"
               :image tt/image
               :description tt/episode-description}))
       (into [])))

;;------;;
;; view ;;
;;------;;

(defn theme-mode-switch-view
  "Create theme mode switch view"
  []
  (f/widget
   :watch [{:keys [theme-mode]} app-state]
   (m/IconButton
    .onPressed (partial switch-theme-mode theme-mode)
    .icon (condp = theme-mode
            m/ThemeMode.dark (m/Icon m/Icons.light_mode_outlined)
            m/ThemeMode.light (m/Icon m/Icons.dark_mode_outlined)))))

(defn navibar-view
  "Create navigationbar view"
  []
  (f/widget
   :watch [{:keys [current-index]} navibar-state]
   (m/NavigationBar
    .labelBehavior m/NavigationDestinationLabelBehavior.alwaysShow
    .selectedIndex current-index
    .onDestinationSelected (partial navibar-switch-index)
    .destinations [(m/NavigationDestination .icon (m/Icon m/Icons.audiotrack) .label "library")
                   (m/NavigationDestination .icon (m/Icon m/Icons.explore) .label "explore")
                   (m/NavigationDestination .icon (m/Icon m/Icons.download) .label "download")])))

(defn avatar-view
  "Create avatar view"
  [image]
  (f/widget
   :context cx
   :width 80 :height 80
   (m/Container)
   .decoration
   (m/BoxDecoration
    .borderRadius  (m/BorderRadius.circular 10))
   .image
   (m/DecorationImage
    .fit m/BoxFit.cover)
   .image
   (m/NetworkImage image)))

(defn podcast-avatar-view
  "Create podcast avatar view"
  [image]
  (avatar-view image))

(defn podcast-list-easy-refresh-view
  "Create podcast list easy_refresh view"
  []
  (f/widget
   :managed [controller (er/EasyRefreshController)]
   (er/EasyRefresh
    .controller controller
    .header (er/ClassicHeader)
    .footer (er/ClassicFooter)
    .refreshOnStart true
    .onRefresh podcast-list-refresh-data)
   (podcast-list-view)))

(defn podcast-list-view
  "Create podcast list view"
  []
  (log "[podcast-list-view]")
  (f/widget
   :watch [{:keys [data]} podcast-list-state]
   (m/ListView.builder
    .itemBuilder
    (fn [cx i]
      (podcast-list-item-view (data i)))
    .itemCount (count data))))

(defn podcast-list-item-view
  "Create podcast list item view"
  [{:keys [title author image] :as podcast}]
  (f/widget
   :context cx
   (m/ListTile
    .leading (podcast-avatar-view image)
    .title (m/Text title)
    .subtitle (m/Text author)
    .onTap #(pushto cx (str "/podcast/" title) podcast))))

(defn podcast-details-background-view
  "Create podcast details background view"
  [image]
  (m/Container
   .decoration
   (m/BoxDecoration
    .image
    (m/DecorationImage
     .fit m/BoxFit.cover
     .image (m/NetworkImage image)))))

(defn podcast-details-info-view
  "Create podcast details info view"
  [{:keys [title author description] :as podcast}]
  (log "[podcast-details-info-view]" ":podcast" podcast)
  (f/widget
   :padding (m/EdgeInsets.symmetric .horizontal 20 .vertical 0)
   (m/Column)
   .children
   [(m/ListTile
     .title (m/Text title)
     .subtitle (m/Text author))
    (podcast-details-description-view description)]))

(defn podcast-details-description-view
  [description]
  (f/widget
   :watch [expanded (atom false) :as expanded-state]
   :let [max-height 80
         gradient (m/LinearGradient
                   .begin m/Alignment.topCenter
                   .end m/Alignment.bottomCenter
                   .stops [0.9 1]
                   .colors [m/Colors.white (.withAlpha m/Colors.white 0)])
         constriants  (if expanded
                        (m/BoxConstraints)
                        (m/BoxConstraints.loose (m/Size ##Inf max-height)))
         content-view (m/InkWell
                       .onTap (fn [] (swap! expanded-state not) nil)
                       .child (m/Text description))]

   (m/AnimatedSize
    .duration (Duration .milliseconds 150)
    .curve m/Curves.fastOutSlowIn
    .alignment m/Alignment.topCenter)
   (m/Container .constraints constriants)
   (if expanded
     content-view
     (m/ShaderMask
      .shaderCallback (fn [bound] (.createShader gradient bound))
      .child content-view))))

(defn podcast-details-actions-view
  "Create podcast details actions view"
  [episode-list-query-state]
  (f/widget
   :context cx
   :padding (m/EdgeInsets.symmetric .horizontal 20)
   :watch [search-bar-visible (atom false) :as search-bar-visible-state]
   (m/Column
    .mainAxisSize m/MainAxisSize.min)
   .children
   [;; action buttons
    (m/Row
     .mainAxisAlignment m/MainAxisAlignment.start
     .children
     [(m/OutlinedButton.icon
       .label (m/Text "Follow")
       .icon (m/Icon m/Icons.add)
       .onPressed (fn []))
      (m/IconButton
       .icon (m/Icon m/Icons.more_vert_outlined)
       .onPressed (fn []))
      (m/IconButton
       .icon (m/Icon m/Icons.search)
       .onPressed (partial swap! search-bar-visible-state not))
      (m/IconButton
       .icon (m/Icon m/Icons.sort)
       .onPressed (partial show-episode-list-sort-bottomsheet cx episode-list-query-state))
      (m/IconButton
       .icon (m/Icon m/Icons.filter_alt_outlined)
       .onPressed (partial show-episode-list-filter-bottomsheet cx episode-list-query-state))])
;; search bar
    (f/widget
     :managed [text-edit-controller (m/TextEditingController)
               focus-node (m/FocusNode)]
     (m/Visibility
      .visible search-bar-visible)
     (m/TextField
      .controller text-edit-controller
      .focusNode focus-node
      .autofocus true
      .onChanged (fn [v]
                   (log "[search-input]" v)
                   (swap! episode-list-query-state assoc :q-search v))
      .onTap (fn [] (.requestFocus focus-node))
      .onTapOutside (fn [event] (.unfocus focus-node))
      .decoration (m/InputDecoration
                   .hintText "Search episode"
                   .prefixIcon (m/Icon m/Icons.search)
                   .suffixIcon (m/GestureDetector
                                .onTap (fn [] (.-text! text-edit-controller "") nil)
                                .child (m/Icon m/Icons.close))
                   .filled true .isDense false
                   .contentPadding (m/EdgeInsets.all 0)
                   .border (m/OutlineInputBorder
                            .borderRadius (m/BorderRadius.all (m/Radius.circular 8))
                            .borderSide m/BorderSide.none
                            .gapPadding 0.0))))]))

(defn bottomsheet-selection-view
  [& {:keys [header items test-selected on-select]}]
  (f/widget
   :context cx
   :get {{:flds [style]} m/DefaultTextStyle}
   :let [header-text-style (.apply style
                                   .fontWeightDelta 2
                                   .fontSizeFactor 2)
         text-style (.apply style
                            .fontWeightDelta 1
                            .fontSizeFactor 1)
         header-view (m/Container
                      .alignment m/Alignment.center
                      .child (m/Text header .style header-text-style))]
   :padding (m/EdgeInsets.symmetric .horizontal 20)
   (m/ListView.separated
    .itemCount (inc (count items))
    .separatorBuilder (constantly (m/Divider))
    .shrinkWrap true
    .itemBuilder
    (fn [cx i]
      (case i
        0 header-view
        (let [{:keys [kw display-text]} (items (dec i))]
          (m/ListTile
           .onTap (partial on-select kw)
           .leading (m/Text display-text .style text-style)
           .trailing (when (test-selected kw) (m/Icon m/Icons.check)))))))))

(defn show-episode-list-sort-bottomsheet
  [cx episode-list-query-state]
  (m/showModalBottomSheet
   .context cx
   .showDragHandle true .isScrollControlled false
   .builder
   (fn [cx]
     (bottomsheet-selection-view
      :header "Sort episode"
      :items [{:kw :sort-default :display-text "Default"}
              {:kw :sort-latest-first :display-text "Latest first"}
              {:kw :sort-earliest-frist :display-text "Earliest first"}
              {:kw :sort-alphabet-A-Z :display-text "Alphabetical A-Z"}
              {:kw :sort-alphabet-Z-A :display-text "Alphabetical Z-A"}]
      :test-selected (partial = (@episode-list-query-state :q-sort))
      :on-select (fn [kw]
                   (swap! episode-list-query-state assoc :q-sort kw)
                   (m/Navigator.pop cx))))))

(defn show-episode-list-filter-bottomsheet
  [cx episode-list-query-state]
  (m/showModalBottomSheet
   .context cx
   .showDragHandle true .isScrollControlled false
   .builder
   (fn [cx]
     (bottomsheet-selection-view
      :header "Episode Filter"
      :items [{:kw :filter-none :display-text "None"}
              {:kw :filter-started :display-text "Started"}
              {:kw :filter-played :display-text "Played"}
              {:kw :filter-unplayed :display-text "Unplayed"}]
      :test-selected (partial = (@episode-list-query-state :q-filter))
      :on-select (fn [kw]
                   (swap! episode-list-query-state assoc :q-filter kw)
                   (m/Navigator.pop cx))))))

(defn episode-avatar-view
  "Craete podcast episode avatar view"
  [image]
  (avatar-view image))

(defn episode-list-view
  "Create podcast episode list view"
  [episode-list-state episode-list-query-state]
  (f/widget
   :watch [{:keys [episode-list]} episode-list-state
           episode-list-query episode-list-query-state]
   :let [_ (log "[episode-list-view]..." ":episode-list" (count episode-list) ":episode-list-query" episode-list-query)
         {:keys [q-sort q-filter q-search]} episode-list-query
         sort-fn (condp = q-sort
                   :sort-default identity
                   :sort-alphabet-A-Z (partial sort-by #(:title %))
                   :sort-alphabet-Z-A (partial sort-by #(:title %) #(compare %2 %1))
                   (partial sort-by #(:title %)))
         items (->> episode-list
                    (filter #(clojure.string/includes? (% :title) q-search))
                    sort-fn
                    (into []))
         _ (log "[episode-list-view]!!!" ":episode-list" (count items))]
   (m/SliverList.builder
    .itemBuilder
    (fn [cx i]
      (episode-list-item-view (items i)))
    .itemCount (count items))))

(defn episode-list-item-view
  "Create podcast episode list item view"
  [{:keys [title pubDate duration image description] :as episode}]
  (m/ExpansionTile
   .leading (episode-avatar-view image)
   .title (m/Text title)
   .subtitle (m/Text (str pubDate " | " duration))
   .trailing (episode-list-item-trailing-actions-view)
   .childrenPadding (m/EdgeInsets.symmetric .horizontal 20 .vertical 0)
   .children
   [(m/Text description .maxLines 5 .overflow m/TextOverflow.ellipsis)
    (episode-list-item-expansion-actions-view episode)]))

(defn episode-list-item-trailing-actions-view
  "Create podcast episode list item trailing actions view"
  []
  (f/widget
   :context cx
   :get {{:flds [primaryColor]} m/Theme}
   (m/Row
    .mainAxisAlignment m/MainAxisAlignment.spaceBetween
    .mainAxisSize m/MainAxisSize.min)
   .children
   [;; episode download action
    (m/IconButton.outlined
     .icon (m/Icon m/Icons.download .color primaryColor)
     .onPressed (fn []))
   ;; episode play/pause actions
    (m/IconButton.outlined
     .icon (m/Icon m/Icons.play_circle .color primaryColor)
     .onPressed (fn []))]))

(defn episode-list-item-expansion-actions-view
  "Create podcast episode list item expansion actions view"
  [episode]
  (f/widget
   :context cx
   (m/Row
    .mainAxisAlignment m/MainAxisAlignment.spaceBetween)
   .children
   [;; episode delete action
    (m/Flexible .fit m/FlexFit.tight
                .child
                (m/IconButton
                 .icon
                 (m/Column
                  .mainAxisSize m/MainAxisSize.min
                  .children
                  [(m/Icon m/Icons.delete)
                   (m/Text "Delete")])
                 .onPressed (fn [])))
    ;; episode add action
    (m/Flexible .fit m/FlexFit.tight
                .child
                (m/IconButton
                 .icon
                 (m/Column
                  .mainAxisSize m/MainAxisSize.min
                  .children
                  [(m/Icon m/Icons.add)
                   (m/Text "Add")])
                 .onPressed (fn [])))
    ;; episode mark-played action
    (m/Flexible .fit m/FlexFit.tight
                .child
                (m/IconButton
                 .icon
                 (m/Column
                  .mainAxisSize m/MainAxisSize.min
                  .children
                  [(m/Icon m/Icons.check)
                   (m/Text "Mark Played")])
                 .onPressed (fn [])))
    ;; episode details action
    (m/Flexible .fit m/FlexFit.tight
                .child
                (m/IconButton
                 .icon
                 (m/Column
                  .mainAxisSize m/MainAxisSize.min
                  .children
                  [(m/Icon m/Icons.expand)
                   (m/Text "More")])
                 .onPressed (partial show-episode-list-item-bottomsheet cx episode)))]))

(defn show-episode-list-item-bottomsheet
  "Show podcast episode list item bottomsheel"
  [cx episode]
  (m/showModalBottomSheet
   .context cx
   .showDragHandle true .isScrollControlled true
   .builder (fn [cx] (episode-list-item-bottomsheet-content-view episode))))

(defn episode-list-item-bottomsheet-content-view
  "Create podcast episode list item bottomsheel content view"
  [{:keys [title description]}]
  (f/widget
   :context cx
   :get {{:flds [style]} m/DefaultTextStyle}
   :padding (m/EdgeInsets.symmetric .horizontal 20)
   :let [text-style (.apply style
                            .fontWeightDelta 2
                            .fontSizeFactor 2)]
   (m/DraggableScrollableSheet
    .initialChildSize 0.5
    .expand false
    .builder
    (fn [cx scroll-controller]
      (f/widget
       (m/SingleChildScrollView
        .controller scroll-controller)
       (m/Column)
       .children
       [(m/Text title .style text-style)
        (m/SizedBox .height 20)
        (m/Text description)])))))

;;------;;
;; page ;;
;;------;;

(defn home-page
  "Create home page"
  []
  (log "[home-page]")
  (m/Scaffold
   .appBar
   (m/AppBar
    .title (m/Text app-name)
    .actions [(theme-mode-switch-view) (m/SizedBox .width 20)])
   .bottomNavigationBar (navibar-view)
   .body (m/Center .child (podcast-list-easy-refresh-view))
   .floatingActionButton
   (when kDebugMode
     (m/FloatingActionButton.extended
      .label (m/Text "restart")
      .icon (m/Icon m/Icons.refresh)
      .onPressed Restart.restartApp))))

(defn podcast-detail-page
  "Create podcast detail page"
  [{:keys [rss title image] :as podcast}]
  (log "[podcast-detail-page]" ":podcast" podcast)
  (f/widget
   :context cx
   :let [episode-list-state (atom {:episode-list []})
         episode-list-query-state (atom {:q-filter :filter-none :q-sort :sort-default :q-search ""})]
   :managed [controller (er/EasyRefreshController)]
   (m/Scaffold)
   .body
   (er/EasyRefresh
    .controller controller
    .header (er/ClassicHeader)
    .footer (er/ClassicFooter)
    .refreshOnStart true
    .onRefresh
    (fn []
      (let [data (episode-list-fetch-data rss)]
        (swap! episode-list-state assoc :episode-list data))))
   (m/CustomScrollView)
   .slivers
   [(m/SliverAppBar
     .title (m/Text title)
     .expandedHeight 300
     .pinned true .stretch true
     .flexibleSpace
     (m/FlexibleSpaceBar
      .stretchModes
      [m/StretchMode.zoomBackground
       m/StretchMode.fadeTitle]
      .background (podcast-details-background-view image)))
    (m/SliverToBoxAdapter
     .child
     (m/Column
      .children
      [(podcast-details-info-view podcast)
       (podcast-details-actions-view episode-list-query-state)
       (m/Divider)]))
    (episode-list-view episode-list-state episode-list-query-state)]))

;;------;;
;; main ;;
;;------;;

(defn main
  "Main: program entrypoint"
  []
  (f/run
   :watch [{:keys [theme-mode]} app-state]
   (m/MaterialApp.router
    .title app-name
    .debugShowCheckedModeBanner false
    .theme (m/ThemeData.light .useMaterial3 true)
    .darkTheme (m/ThemeData.dark .useMaterial3 true)
    .themeMode theme-mode
    .routerConfig router)))
