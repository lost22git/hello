(ns lost.clojureflutter-demo
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:flutter/foundation.dart" :refer [kDebugMode]]
   ["package:go_router/go_router.dart" :refer [GoRouter GoRoute GoRouterState]]
   [lost.util :refer [log clipboard-set]]
   [lost.api :as api]
   [lost.html :as h]
   [lost.intl :as i]
   [cljd.flutter :as f]
   [cljd.string :as s]))

(defonce app-name "ClojureDart Flutter Demo")
(defonce animation-duration (Duration .milliseconds 400))
(defonce radius 10.0)
(defonce button-shape (m/RoundedRectangleBorder
                       .borderRadius (m/BorderRadius.circular radius)))
(defonce bottomsheet-shape (m/RoundedRectangleBorder
                            .borderRadius
                            (m/BorderRadius.only
                             .topLeft (m/Radius.circular radius)
                             .topRight (m/Radius.circular radius))))

;;--------;;
;; router ;;
;;--------;;

(defonce router
  (GoRouter
   .debugLogDiagnostics kDebugMode
   .routes
   [(GoRoute
     .path "/"
     .builder (fn [cx state] (home-page)))
    (GoRoute
     .path "/test"
     .builder (fn [cx state] (test-page)))
    (GoRoute
     .path "/podcast/:title"
     .builder (fn [cx ^GoRouterState state]
                (podcast-detail-page (.-extra state))))]))

(defn goto
  "Go to destination path page (with extra data)"
  ([cx path & {:keys [extra]}]
   (log "[goto]" ":path" path ":extra" extra)
   (-> (GoRouter.of cx)
       (.go path .extra extra))))

(defn pushto
  "Push to destination path page (with extra data)"
  ([cx path & {:keys [extra]}]
   ; (log "[pushto]" ":path" path ":extra" extra)
   (-> (GoRouter.of cx)
       (.push path .extra extra))))

;;--------;;
;; widget ;;
;;--------;;

(defn my-refresh-indicator
  [.onRefresh .child]
  (f/widget
   :let [refresh-key (#/(m/GlobalKey m/RefreshIndicatorState))]
   :let [_ (Future.delayed (Duration .milliseconds 400) #(some-> refresh-key .-currentState .show))]
   (m/RefreshIndicator.adaptive
    .key refresh-key
    .onRefresh onRefresh)
   child))

(defn hero-image
  [.image .tag]
  (m/LayoutBuilder
   .builder
   (fn [cx ^m/BoxConstraints {:flds [maxHeight]}]
     (f/widget
      (m/Hero .tag (or tag image))
      (m/Container
       .width maxHeight
       .height maxHeight)
      .decoration
      (m/BoxDecoration
       .borderRadius (m/BorderRadius.circular radius))
      .image
      (m/DecorationImage
       .fit m/BoxFit.cover)
      .image
      (m/NetworkImage image)))))

(defn my-overflow-expansion
  [.duration .maxHeight .children]
  (f/widget
   :managed [expanded-state (atom false) :dispose nil]
   :watch [expanded expanded-state]

   (m/AnimatedSize
    .duration (or duration (Duration .milliseconds 400))
    .curve m/Curves.fastOutSlowIn
    .alignment m/Alignment.topCenter)
   (m/ConstrainedBox
    .constraints (case expanded
                   true (m/BoxConstraints)
                   false (m/BoxConstraints.loose (m/Size ##Inf maxHeight))))
   (m/GestureDetector .onTap (fn [] (swap! expanded-state not) nil))
   (case expanded
     true (m/Column
           .mainAxisAlignment m/MainAxisAlignment.start
           .crossAxisAlignment m/CrossAxisAlignment.start
           .children children)
     false (m/ShaderMask
            .shaderCallback (fn [bounds] (-> (m/LinearGradient
                                              .begin m/Alignment.topCenter
                                              .end m/Alignment.bottomCenter
                                              .stops [0.4 1]
                                              .colors [m/Colors.white (.withAlpha m/Colors.white 0)])
                                             (.createShader bounds)))
            .child
            (m/OverflowBox
             .maxHeight ##Inf
             .alignment m/Alignment.topCenter
             .child
             (m/Column
              .mainAxisAlignment m/MainAxisAlignment.start
              .crossAxisAlignment m/CrossAxisAlignment.start
              .children children))))))

;;------;;
;; page ;;
;;------;;

(defn home-page
  "Create home page"
  []
  (log "[home-page]")
  (m/Scaffold
   .appBar
   (m/AppBar
    .title (m/Text app-name)
    .actions [(podcast-list-layout-switch-view) (theme-mode-switch-view) (m/SizedBox .width 20)])
   .bottomNavigationBar (navibar-view)
   .body (m/Center .child (podcast-list-view))
   .floatingActionButton
   (test-floating-action-button-view)))

(defn podcast-detail-page
  "Create podcast detail page"
  [{:keys [rss title image] :as podcast}]
  (log "[podcast-detail-page]" ":podcast" podcast)
  (f/widget
   :context cx
   :managed [episode-list-state (atom {:episode-list []}) :dispose nil]
   :bind {:episode-list-state episode-list-state}
   :managed [episode-list-query-state (atom {:q-filter :filter-none :q-sort :sort-default :q-search ""}) :dispose nil]
   :bind {:episode-list-query-state episode-list-query-state}
   (m/Scaffold
    .floatingActionButton
    (test-floating-action-button-view))
   .body
   (my-refresh-indicator
    .onRefresh
    (fn []
      (let [{:keys [episode-list]} (await (api/fetch-podcast rss))]
        (swap! episode-list-state assoc :episode-list episode-list))))
   (m/CustomScrollView)
   .slivers
   [(m/SliverMainAxisGroup
     .slivers [(m/SliverAppBar
                .expandedHeight 300
                .pinned true .floating false .snap false
                .title (m/Text title)
                .flexibleSpace
                (m/FlexibleSpaceBar
                 .background
                 (podcast-details-background-image-view image)))
               (m/SliverToBoxAdapter
                .child
                (podcast-details-info-view podcast))])
    (m/SliverMainAxisGroup
     .slivers [(m/SliverAppBar
                .automaticallyImplyLeading false
                .pinned true .floating false .snap false
                .title (episode-list-actions-view))
               (m/SliverToBoxAdapter .child (m/Divider))
               (episode-list-view)])]))

;;------;;
;; test ;;
;;------;;

(defn test-page
  "Create test page"
  []
  (f/widget
   :context cx
   :managed [q-sort-state (atom {:q-sort-kw :duration :q-sort-asc true}) :dispose nil]
   :watch [{:keys [q-sort-kw q-sort-asc]} q-sort-state]
   :padding (m/EdgeInsets.symmetric .horizontal 20)
   (m/Scaffold)
   .body
   (m/GridView.count
    .crossAxisCount 2
    .crossAxisSpacing 20
    .mainAxisSpacing 20
    .childAspectRatio 4
    .shrinkWrap true)
   .children (for [{:keys [kw label]} [{:kw :title :label "by title"}
                                       {:kw :duration :label "by duration"}
                                       {:kw :pub-date :label "by pub date"}]]
               (f/widget
                (m/Expanded .flex 1)
                (m/IconButton.filledTonal
                 .isSelected (= q-sort-kw kw)
                 .onPressed (fn [] (swap! q-sort-state assoc :q-sort-kw kw :q-sort-asc (not q-sort-asc))))
                .icon
                (m/Row
                 .mainAxisSize m/MainAxisSize.min
                 .mainAxisAlignment m/MainAxisAlignment.center
                 .crossAxisAlignment m/CrossAxisAlignment.center)
                .children
                [(m/Text label)
                 (m/SizedBox .width 4)
                 (case (= kw q-sort-kw)
                   false (m/SizedBox .width 0)
                   true (case q-sort-asc
                          true (m/Icon m/Icons.arrow_circle_up_rounded)
                          false (m/Icon m/Icons.arrow_circle_down_rounded)))]))))

(defn test-floating-action-button-view
  []
  (when kDebugMode
    (f/widget
     :context cx
     (m/FloatingActionButton.extended
      .onPressed (fn [] (pushto cx "/test"))
      .label (m/Text "test"))
     .icon (m/Icon m/Icons.help))))

;;------;;
;; view ;;
;;------;;

(defn theme-mode-switch-view
  "Create theme mode switch view"
  []
  (f/widget
   :get [:dark-mode-state]
   :watch [is-dark-mode dark-mode-state]
   (m/IconButton
    .onPressed (fn [] (swap! dark-mode-state not)))
   .icon
   (m/AnimatedSwitcher
    .duration animation-duration
    .reverseDuration animation-duration)
   (case is-dark-mode
     false (m/Icon m/Icons.dark_mode_outlined)
     true (m/Icon m/Icons.light_mode_outlined))))

(defn podcast-list-layout-switch-view
  "Create podcast list layout switch view"
  []
  (f/widget
   :get [:podcast-list-layout-state]
   :watch [layout podcast-list-layout-state]
   :let [{:keys [icon key]} (podcast-list-layout-options layout)]
   (m/IconButton
    .onPressed (fn []
                 (swap! podcast-list-layout-state
                        #(case %
                           :list :grid
                           :grid :list))))
   .icon
   (m/AnimatedSwitcher
    .duration animation-duration
    .reverseDuration animation-duration)
   (m/Icon icon .key key)))

(defn navibar-view
  "Create navigationbar view"
  []
  (f/widget
   :managed [navibar-state (atom {:current-index 0}) :dispose nil]
   :watch [{:keys [current-index]} navibar-state]
   (m/NavigationBar
    .labelBehavior m/NavigationDestinationLabelBehavior.alwaysShow
    .selectedIndex current-index
    .onDestinationSelected (fn [i]
                             (swap! navibar-state assoc :current-index i))
    .destinations [(m/NavigationDestination .icon (m/Icon m/Icons.audiotrack) .label "library")
                   (m/NavigationDestination .icon (m/Icon m/Icons.explore) .label "explore")
                   (m/NavigationDestination .icon (m/Icon m/Icons.download) .label "download")])))

(defonce podcast-list-layout-options
  {:list
   {:key (m/ValueKey "list")
    :icon m/Icons.grid_on_outlined
    :builder (fn [podcast-list]
               (m/ListView.builder
                ; .physics (m/ClampingScrollPhysics)
                .itemCount (count podcast-list)
                .itemBuilder
                (fn [cx i]
                  (podcast-list-tile-view (podcast-list i)))))}
   :grid
   {:key (m/ValueKey "grid")
    :icon m/Icons.list
    :builder (fn [podcast-list]
               (m/GridView.builder
                .padding (m/EdgeInsets.symmetric .horizontal 10)
                ; .physics (m/ClampingScrollPhysics)
                .itemCount (count podcast-list)
                .itemBuilder
                (fn [cx i]
                  (podcast-list-grid-tile-view (podcast-list i)))
                .gridDelegate
                (m/SliverGridDelegateWithFixedCrossAxisCount
                 .crossAxisCount 3
                 .crossAxisSpacing 10
                 .mainAxisSpacing 10)))}})

(defn podcast-list-view
  "Create podcast list view"
  []
  (log "[podcast-list-view]")
  (f/widget
   :managed [podcast-list-state (atom {:podcast-list []}) :dispose nil]
   :watch [{:keys [podcast-list]} podcast-list-state]
   (my-refresh-indicator
    .onRefresh (fn []
                 (let [data (await (api/fetch-podcast-list))]
                   (swap! podcast-list-state assoc :podcast-list data))))
   (f/widget
    :get [:podcast-list-layout-state]
    :watch [layout podcast-list-layout-state]
    :let [{:keys [builder]} (podcast-list-layout-options layout)]
    (builder podcast-list))))

(defn podcast-list-tile-view
  "Create podcast list tile view"
  [{:keys [title author image] :as podcast}]
  (f/widget
   :context cx
   (m/ListTile
    .leading (hero-image .image image)
    .title (m/Text title)
    .subtitle (m/Text author)
    .onTap (fn []
             (pushto cx (str "/podcast/" title) :extra podcast)))))

(defn podcast-list-grid-tile-view
  "Create podcast list grid tile view"
  [{:keys [title image] :as podcast}]
  (f/widget
   :context cx
   (m/GestureDetector
    .onTap (fn []
             (pushto cx (str "/podcast/" title) :extra podcast)))
   (hero-image .image image)))

(defn podcast-details-background-image-view
  "Create podcast details background image view"
  [image]
  (f/widget
   (m/Hero .tag image)
   (m/Container)
   .decoration
   (m/BoxDecoration)
   .image
   (m/DecorationImage
    .fit m/BoxFit.cover)
   .image (m/NetworkImage image)))

(defn podcast-details-info-view
  "Create podcast details info view"
  [{:keys [rss image title author description] :as podcast}]
  (f/widget
   (m/Column
    .mainAxisAlignment m/MainAxisAlignment.start
    .crossAxisAlignment m/CrossAxisAlignment.start)
   .children
   [(m/ListTile
     .leading (hero-image .image image .tag "")
     .trailing (m/OutlinedButton.icon
                .style (m/OutlinedButton.styleFrom
                        .shape button-shape)
                .label (m/Text "Follow")
                .icon (m/Icon m/Icons.add)
                .onPressed (fn []))
     .title (m/Text title)
     .subtitle (m/Text author))
    (podcast-details-info-expansion-view podcast)]))

(defn podcast-details-info-expansion-view
  "Create podcast details info expansion view"
  [{:keys [rss link description]}]
  (f/widget
   :padding (m/EdgeInsets.symmetric .horizontal 20 .vertical 0)
   (my-overflow-expansion
    .maxHeight 40)
   .children
   [(m/Text description)
    (m/Column
     .mainAxisSize m/MainAxisSize.min
     .mainAxisAlignment m/MainAxisAlignment.start
     .crossAxisAlignment m/CrossAxisAlignment.start
     .children
     (for [{:keys [icon link toast]} [{:icon m/Icons.rss_feed_rounded
                                       :link rss
                                       :toast "rss feed link has been copied to clipboard"}
                                      {:icon m/Icons.web_rounded
                                       :link link
                                       :toast "website link has been copied to clipboard"}]
           :when (not (nil? link))]
       (podcast-link-tile-view .icon icon .link link .toast toast)))]))

(defn podcast-link-tile-view
  "Create podcast link tile view"
  [.link .icon .toast]
  (f/widget
   :get [m/ScaffoldMessenger]
   :padding (m/EdgeInsets.symmetric .vertical 0)
   (m/ListTile
    .contentPadding (m/EdgeInsets.symmetric .vertical 0)
    .visualDensity m/VisualDensity.compact
    .leading (m/Icon icon)
    .title (m/Text link
                   .maxLines 1
                   .style (m/TextStyle
                           .color m/Colors.blue
                           .decoration (m/TextDecoration.underline)
                           .decorationColor m/Colors.blue))
    .trailing (m/IconButton
               .onPressed (fn []
                            (let [_ (await (clipboard-set link))
                                  _ (->>
                                     (m/Text toast)
                                     (m/SnackBar .content)
                                     (.showSnackBar scaffold-messenger))]))
               .icon (m/Transform.scale
                      .scale 0.9
                      .child (m/Icon m/Icons.copy_rounded))))))

(defn episode-list-actions-view
  "Create episode list actions view"
  []
  (f/widget
   :context cx
   :get [:episode-list-query-state]
   :managed [episode-list-search-bar-visible-state (atom false) :dispose nil]
   :bind {:episode-list-search-bar-visible-state episode-list-search-bar-visible-state}
   :watch [search-bar-visible episode-list-search-bar-visible-state]
   :let [actions
         [{:icon (m/Icon m/Icons.search)
           :on-pressed
           (partial reset! episode-list-search-bar-visible-state true)}
          {:icon (m/Icon m/Icons.sort)
           :on-pressed
           (partial show-episode-list-query-sort-bottomsheet cx episode-list-query-state)}
          {:icon (m/Icon m/Icons.filter_alt_outlined)
           :on-pressed
           (partial show-episode-list-query-filter-bottomsheet cx episode-list-query-state)}
          {:icon (m/Icon m/Icons.more_vert_outlined)
           :on-pressed (fn [])}]]

   (m/Row
    .mainAxisAlignment m/MainAxisAlignment.start
    .crossAxisAlignment m/CrossAxisAlignment.center)
   .children
   [(m/Expanded
     .child
     (episode-list-search-bar-view))
    (m/Visibility
     .visible (not search-bar-visible)
     .child
     (m/Row
      .mainAxisAlignment m/MainAxisAlignment.end
      .crossAxisAlignment m/CrossAxisAlignment.center
      .children
      (for [a actions]
        (m/IconButton
         .icon (:icon a)
         .onPressed (:on-pressed a)))))]))

(defn episode-list-search-bar-view
  "Create episode list search bar view"
  []
  (f/widget
   :get [:episode-list-query-state]
   :get [:episode-list-search-bar-visible-state]
   :managed [text-edit-controller (m/TextEditingController)
             focus-node (m/FocusNode)]
   :watch [search-bar-visible episode-list-search-bar-visible-state]
   (m/Visibility
    .visible search-bar-visible)
   (m/TextField
    .controller text-edit-controller
    .focusNode focus-node
    .autofocus true
    .onChanged (fn [v]
                 (swap! episode-list-query-state assoc :q-search v))
    .onTap (fn [] (.requestFocus focus-node))
    .onTapOutside (fn [event] (.unfocus focus-node) (reset! episode-list-search-bar-visible-state false))
    .decoration (m/InputDecoration
                 .hintText "Search episode"
                 .prefixIcon (m/Icon m/Icons.search)
                 .suffixIcon (m/GestureDetector
                              .onTap (fn []
                                       (.-text! text-edit-controller "") ;; can not trigger onChange, so we manually trigger the handler
                                       (swap! episode-list-query-state assoc :q-search "")
                                       nil)
                              .child (m/Icon m/Icons.close))
                 .filled true .isDense false
                 .contentPadding (m/EdgeInsets.all 0)
                 .border (m/OutlineInputBorder
                          .borderRadius (m/BorderRadius.all (m/Radius.circular radius))
                          .borderSide m/BorderSide.none
                          .gapPadding 0.0)))))

(defonce episode-list-query-sort-options
  [{:kw :sort-default
    :title "Default"
    :sort-fn identity}
   {:kw :sort-latest-first
    :title "Latest first"
    :sort-fn (partial sort-by :pub-date #(compare %2 %1))}
   {:kw :sort-earliest-frist
    :title "Earliest first"
    :sort-fn (partial sort-by :pub-date)}
   {:kw :sort-alphabet-A-Z
    :title "Alphabetical A-Z"
    :sort-fn (partial sort-by :title)}
   {:kw :sort-alphabet-Z-A
    :title "Alphabetical Z-A"
    :sort-fn (partial sort-by :title #(compare %2 %1))}])

(defonce episode-list-query-filter-options
  [{:kw :filter-none :title "None"}
   {:kw :filter-started :title "Started"}
   {:kw :filter-played :title "Played"}
   {:kw :filter-unplayed :title "Unplayed"}])

(defn show-episode-list-query-sort-bottomsheet
  "Show podcast episode list query sort bottomsheet"
  [cx episode-list-query-state]
  (m/showModalBottomSheet
   .context cx
   .showDragHandle true
   .isScrollControlled false
   .shape bottomsheet-shape
   .builder
   (fn [cx]
     (bottomsheet-selection-view
      .header "Sort episode"
      .items episode-list-query-sort-options
      .testSelected (partial = (:q-sort @episode-list-query-state))
      .onSelected (fn [kw]
                    (swap! episode-list-query-state assoc :q-sort kw)
                    (m/Navigator.pop cx))))))

(defn show-episode-list-query-filter-bottomsheet
  "Show podcast episode list query filter bottomsheet"
  [cx episode-list-query-state]
  (m/showModalBottomSheet
   .context cx
   .showDragHandle true
   .isScrollControlled false
   .shape bottomsheet-shape
   .builder
   (fn [cx]
     (bottomsheet-selection-view
      .header "Filter episode"
      .items episode-list-query-filter-options
      .testSelected (partial = (:q-filter @episode-list-query-state))
      .onSelected (fn [kw]
                    (swap! episode-list-query-state assoc :q-filter kw)
                    (m/Navigator.pop cx))))))

(defn bottomsheet-selection-view
  "Creaet common bottomsheet selection view"
  [.header .items .testSelected .onSelected]
  (f/widget
   :context cx
   :get {{{:flds [headlineLarge bodyLarge]} .-textTheme} m/Theme}
   :let [header-view (m/Container
                      .alignment m/Alignment.center
                      .child (m/Text header .style headlineLarge))]
   :padding (m/EdgeInsets.symmetric .horizontal 20)
   (m/ListView.separated
    .physics (m/ClampingScrollPhysics)
    .shrinkWrap true
    .itemCount (inc (count items))
    .separatorBuilder (constantly (m/Divider))
    .itemBuilder
    (fn [cx i]
      (case i
        0 header-view
        (let [{:keys [kw title]} (items (dec i))]
          (m/ListTile
           .onTap (partial onSelected kw)
           .leading (m/Text title .style bodyLarge)
           .trailing (when (testSelected kw) (m/Icon m/Icons.check)))))))))

(defn episode-list-view
  "Create podcast episode list view"
  []
  (f/widget
   :get [:episode-list-state]
   :get [:episode-list-query-state]
   :watch [{:keys [episode-list]} episode-list-state
           {:keys [q-sort q-filter q-search]} episode-list-query-state]
   :let [_ (log "[episode-list-view]..." ":episode-list" (count episode-list) ":episode-list-query" @episode-list-query-state)
         search-fn (partial filter #(s/includes? (:title %) q-search))
         sort-fn (->> episode-list-query-sort-options (filter #(= q-sort (:kw %))) first :sort-fn)
         items (->> episode-list
                    search-fn
                    sort-fn
                    (into []))
         _ (log "[episode-list-view]!!!" ":episode-list" (count items))]
   (m/SliverList.builder
    .itemCount (count items)
    .itemBuilder
    (fn [cx i]
      (episode-tile-view (items i))))))

(defn episode-tile-view
  "Create podcast episode tile view"
  [{:keys [title pub-date duration image description] :as episode}]
  ; (log "[episode-tile-view]" title pub-date duration image)
  (f/widget
   (m/ExpansionTile
    .leading (hero-image .image (or image ""))
    .title (m/Text (or title "nil"))
    .subtitle (m/Text (str (some-> pub-date i/format-episode-pub-date (or "nil")) " • " (some-> duration i/format-episode-duration (or "nil"))))
    .trailing (episode-tile-play-button-view)
    .childrenPadding (m/EdgeInsets.symmetric .horizontal 20 .vertical 0)
    .expandedCrossAxisAlignment m/CrossAxisAlignment.start)
   .children
   [(m/Text (some-> description h/trim-html-tags (or "nil")) .maxLines 5 .overflow m/TextOverflow.ellipsis)
    (episode-tile-expansion-actions-view episode)]))

(defn episode-tile-play-button-view
  "Creae podcast episode tile play/pause button view"
  []
  (f/widget
   :vsync vsync
   :managed [episode-playing-state (atom false) :dispose nil]
   :watch [is-playing episode-playing-state]
   :managed [animation-controller (m/AnimationController
                                   .vsync vsync
                                   .duration animation-duration
                                   .reverseDuration animation-duration)]
   :let [_ (if is-playing (.forward animation-controller) (.reverse animation-controller))]
   (m/IconButton.outlined
    .onPressed (fn []
                 (case (swap! episode-playing-state not)
                   true (.forward animation-controller)
                   false (.reverse animation-controller))
                 nil))
   .icon
   (m/AnimatedIcon
    .icon m/AnimatedIcons.play_pause
    .progress animation-controller)))

(defn episode-tile-expansion-actions-view
  "Create podcast episode tile expansion actions view"
  [episode]
  (f/widget
   :context cx
   :let [actions [(episode-tile-download-action-view)
                  (episode-tile-action-view
                   .children
                   [(m/Icon m/Icons.add)
                    (m/Text "Add")])
                  (episode-tile-action-view
                   .onTap (fn [])
                   .children
                   [(m/Icon m/Icons.check)
                    (m/Text "Mark Played")])
                  (episode-tile-action-view
                   .onTap (partial show-episode-details-bottomsheet cx episode)
                   .children
                   [(m/Icon m/Icons.expand)
                    (m/Text "More")])]]
   (m/Row
    .mainAxisAlignment m/MainAxisAlignment.spaceBetween
    .crossAxisAlignment m/CrossAxisAlignment.center)
   .children
   (for [a actions]
     (m/Expanded .flex 1 .child a))))

(defn episode-tile-action-view
  "Create podcast episode tile action view"
  [.onTap .children]
  (f/widget
   (m/TextButton
    .onPressed onTap
    .style (m/TextButton.styleFrom
            .padding m/EdgeInsets.zero
            .shape button-shape))
   (m/Column
    .mainAxisSize m/MainAxisSize.min
    .mainAxisAlignment m/MainAxisAlignment.center
    .crossAxisAlignment m/CrossAxisAlignment.center)
   .children children))

(defn episode-tile-download-action-view
  "Create podcast episode tile download action view"
  []
  (f/widget
   :managed [episode-download-state (atom {:download-status :not-downloaded :download-progress 0}) :dispose nil]
   :watch [{:keys [download-status download-progress]} episode-download-state]
   :managed [sub (-> (Stream/periodic (Duration .seconds 1) identity)
                     (.listen
                      (fn [_]
                        (let [s (swap! episode-download-state update :download-progress (partial + 10))]
                          (when (< 100 (:download-progress s))
                            (swap! episode-download-state assoc :download-status :downloaded)))))
                     (doto (.pause)))
             :dispose .cancel]
   :let [on-tap (fn []
                  (swap! episode-download-state
                         (fn [old]
                           (case (:download-status old)
                                 ;; start downloading 
                             :not-downloaded (do (.resume sub) (assoc old :download-status :downloading))
                                 ;; stop downloading
                             :downloading (do (.pause sub) (assoc old :download-status :not-downloaded))
                                ;; delete and reset
                             :downloaded (do (.pause sub) (assoc old :download-progress 0 :download-status :not-downloaded)))))
                  nil)
         children (case download-status
                    :not-downloaded [(m/Icon m/Icons.download) (m/Text "Download")]
                    :downloading [(m/Stack
                                   .alignment m/Alignment.center
                                   .children
                                   [(m/CircularProgressIndicator.adaptive .value (/ download-progress 100))
                                    (m/Text (str download-progress))])
                                  (m/SizedBox .width 0 .height 0)]
                    :downloaded [(m/Icon m/Icons.delete) (m/Text "Delete")])]

   (episode-tile-action-view
    .onTap on-tap
    .children children)))

(defn show-episode-details-bottomsheet
  "Show podcast episode details bottomsheet"
  [cx episode]
  (m/showModalBottomSheet
   .context cx
   .isScrollControlled true
   .showDragHandle true
   .shape bottomsheet-shape
   .builder (fn [cx] (episode-details-view episode))))

(defn episode-details-view
  "Create podcast episode details view"
  [{:keys [title description content]}]
  (f/widget
   :context cx
   :get {{{:flds [titleLarge]} .-textTheme} m/Theme}
   :padding (m/EdgeInsets.symmetric .horizontal 20)
   (m/DraggableScrollableSheet
    .initialChildSize 0.5
    .expand false .snap false
    .builder
    (fn [cx scroll-controller]
      (f/widget
       (m/ScrollConfiguration
         ;; make child widget's physics work
        .behavior (.copyWith (m/ScrollBehavior) .overscroll false))
       (m/SingleChildScrollView
        .physics (m/ClampingScrollPhysics)
        .controller scroll-controller)
       (m/Column
        .mainAxisAlignment m/MainAxisAlignment.start
        .crossAxisAlignment m/CrossAxisAlignment.start)
       .children
       [(m/Center .child (m/Text title .style titleLarge))
        (m/SizedBox .height 20)
        (h/render-html (or content description))])))))

;;------;;
;; main ;;
;;------;;

(defn main
  "Main: program entrypoint"
  []
  (f/run
   :managed [dark-mode-state (atom false) :dispose nil]
   :bind {:dark-mode-state dark-mode-state}
   :managed [podcast-list-layout-state (atom :list) :dispose nil]
   :bind {:podcast-list-layout-state podcast-list-layout-state}
   :watch [is-dark-mode dark-mode-state]
   (m/MaterialApp.router
    .title app-name
    .debugShowCheckedModeBanner false
    .theme (m/ThemeData.light .useMaterial3 true)
    .darkTheme (m/ThemeData.dark .useMaterial3 true)
    .themeMode (case is-dark-mode
                 false (m/ThemeMode.light)
                 true (m/ThemeMode.dark))
    .routerConfig router)))
