(ns lost.clojureflutter-demo
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:flutter/foundation.dart" :refer [kDebugMode]]
   ["package:easy_refresh/easy_refresh.dart" :as er]
   ["package:restart_app/restart_app.dart" :refer [Restart]]
   ["package:go_router/go_router.dart" :refer [GoRouter GoRoute GoRouterState]]
   [lost.util :refer [log]]
   [lost.api :as api]
   [lost.html :refer [render-html]]
   [lost.intl :as i]
   [cljd.flutter :as f]))

(defonce app-name "ClojureDart Flutter Demo")

;;--------;;
;; router ;;
;;--------;;

(defonce router
  (GoRouter
   .debugLogDiagnostics true
   .routes
   [(GoRoute
     .path "/"
     .builder (fn [cx state] (home-page)))
    (GoRoute
     .path "/podcast/:title"
     .builder (fn [cx ^GoRouterState state]
                (podcast-detail-page (.-extra state))))]))

(defn goto
  "Go to destination path page (with extra data)"
  ([cx path & {:keys [extra]}]
   (log "[goto]" ":path" path ":extra" extra)
   (-> (GoRouter.of cx)
       (.go path .extra extra))))

(defn pushto
  "Push to destination path page (with extra data)"
  ([cx path & {:keys [extra]}]
   ; (log "[pushto]" ":path" path ":extra" extra)
   (-> (GoRouter.of cx)
       (.push path .extra extra))))

;;------;;
;; data ;;
;;------;;

(defn podcast-list-fetch-data
  "Fetching podcast list data"
  []
  (->> (range) (take 1)
       (map (fn [i]
              {:rss "http://rss.lizhi.fm/rss/14275.xml"
               :image "https://cdn.lizhi.fm/podcast_cover/2018/12/10/2708425912842789447_3000x3000.jpg"
               :title "大内密谈"
               :author "大内密谈"
               :description "「大内密谈Midnightalks」是一档由“深夜谈谈Midnight Network”出品的播客节目。密而不宣，无所不谈。
  「大内密谈Midnightalks」是一档由“深夜谈谈Midnight Network”出品的播客节目。密而不宣，无所不谈。
  「大内密谈Midnightalks」是一档由“深夜谈谈Midnight Network”出品的播客节目。密而不宣，无所不谈。"}))
       (into [])))

;;------;;
;; page ;;
;;------;;

(defn home-page
  "Create home page"
  []
  (log "[home-page]")
  (m/Scaffold
   .appBar
   (m/AppBar
    .title (m/Text app-name)
    .actions [(theme-mode-switch-view) (m/SizedBox .width 20)])
   .bottomNavigationBar (navibar-view)
   .body (m/Center .child (podcast-list-view))
   .floatingActionButton
   (when kDebugMode
     (m/FloatingActionButton.extended
      .label (m/Text "restart")
      .icon (m/Icon m/Icons.refresh)
      .onPressed Restart.restartApp))))

(defn podcast-detail-page
  "Create podcast detail page"
  [{:keys [rss title image] :as podcast}]
  (log "[podcast-detail-page]" ":podcast" podcast)
  (f/widget
   :context cx
   :managed [episode-list-state (atom {:episode-list []}) :dispose nil]
   :managed [episode-list-query-state (atom {:q-filter :filter-none :q-sort :sort-default :q-search ""}) :dispose nil]
   :managed [controller (er/EasyRefreshController)]
   (m/Scaffold)
   .body
   (er/EasyRefresh
    .controller controller
    .header (er/ClassicHeader)
    .footer (er/ClassicFooter)
    .refreshOnStart true
    .onRefresh
    (fn []
      (let [{:keys [episode-list]} (await (api/fetch-podcast rss))]
        (swap! episode-list-state assoc :episode-list episode-list))))
   (m/CustomScrollView)
   .slivers
   [(m/SliverAppBar
     .title (m/Text title)
     .expandedHeight 300
     .pinned true .stretch true
     .flexibleSpace
     (m/FlexibleSpaceBar
      .stretchModes
      [m/StretchMode.zoomBackground
       m/StretchMode.fadeTitle]
      .background (podcast-details-background-image-view image)))
    (m/SliverToBoxAdapter
     .child
     (m/Column
      .children
      [(podcast-details-info-view podcast)
       (podcast-details-actions-view episode-list-query-state)
       (m/Divider)]))
    (episode-list-view episode-list-state episode-list-query-state)]))

;;------;;
;; view ;;
;;------;;

(defn theme-mode-switch-view
  "Create theme mode switch view"
  []
  (f/widget
   :get [:dark-mode-state]
   :watch [is-dark-mode dark-mode-state]
   (m/IconButton
    .onPressed (fn [] (swap! dark-mode-state not)))
   .icon
   (case is-dark-mode
     false (m/Icon m/Icons.dark_mode_outlined)
     true (m/Icon m/Icons.light_mode_outlined))))

(defn navibar-view
  "Create navigationbar view"
  []
  (f/widget
   :managed [navibar-state (atom {:current-index 0}) :dispose nil]
   :watch [{:keys [current-index]} navibar-state]
   (m/NavigationBar
    .labelBehavior m/NavigationDestinationLabelBehavior.alwaysShow
    .selectedIndex current-index
    .onDestinationSelected (fn [i]
                             (swap! navibar-state assoc :current-index i))
    .destinations [(m/NavigationDestination .icon (m/Icon m/Icons.audiotrack) .label "library")
                   (m/NavigationDestination .icon (m/Icon m/Icons.explore) .label "explore")
                   (m/NavigationDestination .icon (m/Icon m/Icons.download) .label "download")])))

(defn tile-image-view
  "Create tile image view"
  [image]
  (m/LayoutBuilder
   .builder
   (fn [cx ^m/BoxConstraints {:flds [maxHeight]}]
     (m/Hero
      .tag image
      .child
      (m/Container
       .width maxHeight
       .height maxHeight
       .decoration
       (m/BoxDecoration
        .borderRadius  (m/BorderRadius.circular 4)
        .image
        (m/DecorationImage
         .fit m/BoxFit.cover
         .image
         (m/NetworkImage image))))))))

(defn podcast-list-view
  "Create podcast list view"
  []
  (log "[podcast-list-view]")
  (f/widget
   :managed [podcast-list-state (atom {:data []}) :dispose nil]
   :watch [{:keys [data]} podcast-list-state]
   :managed [controller (er/EasyRefreshController)]
   (er/EasyRefresh
    .controller controller
    .header (er/ClassicHeader)
    .footer (er/ClassicFooter)
    .refreshOnStart true
    .onRefresh (fn []
                 (let [data (podcast-list-fetch-data)]
                   (swap! podcast-list-state assoc :data data))))
   (m/ListView.builder
    .itemCount (count data)
    .itemBuilder
    (fn [cx i]
      (podcast-list-item-view (data i))))))

(defn podcast-list-item-view
  "Create podcast list item view"
  [{:keys [title author image] :as podcast}]
  (f/widget
   :context cx
   (m/ListTile
    .leading (tile-image-view image)
    .title (m/Text title)
    .subtitle (m/Text author)
    .onTap (fn []
             (pushto cx (str "/podcast/" title) :extra podcast)))))

(defn podcast-details-background-image-view
  "Create podcast details background image view"
  [image]
  (f/widget
   (m/Hero .tag image)
   (m/Container)
   .decoration
   (m/BoxDecoration)
   .image
   (m/DecorationImage
    .fit m/BoxFit.cover)
   .image (m/NetworkImage image)))

(defn podcast-details-info-view
  "Create podcast details info view"
  [{:keys [title author description] :as podcast}]
  (log "[podcast-details-info-view]" ":podcast" podcast)
  (f/widget
   :padding (m/EdgeInsets.symmetric .horizontal 20 .vertical 0)
   (m/Column)
   .children
   [(m/ListTile
     .title (m/Text title)
     .subtitle (m/Text author))
    (podcast-details-description-view description)]))

(defn podcast-details-description-view
  "Create podcast details description view"
  [description]
  (f/widget
   :managed [podcast-description-expanded-state (atom false) :dispose nil]
   :watch [expanded podcast-description-expanded-state]
   :let [max-height 80
         gradient (m/LinearGradient
                   .begin m/Alignment.topCenter
                   .end m/Alignment.bottomCenter
                   .stops [0.9 1]
                   .colors [m/Colors.white (.withAlpha m/Colors.white 0)])
         constriants  (if expanded
                        (m/BoxConstraints)
                        (m/BoxConstraints.loose (m/Size ##Inf max-height)))
         content-view (m/InkWell
                       .onTap (fn [] (swap! podcast-description-expanded-state not) nil)
                       .child (m/Text description))]
   (m/AnimatedSize
    .duration (Duration .milliseconds 150)
    .curve m/Curves.fastOutSlowIn
    .alignment m/Alignment.topCenter)
   (m/Container .constraints constriants)
   (if expanded
     content-view
     (m/ShaderMask
      .shaderCallback #(.createShader gradient %)
      .child content-view))))

(defn podcast-details-actions-view
  "Create podcast details actions view"
  [episode-list-query-state]
  (f/widget
   :context cx
   :padding (m/EdgeInsets.symmetric .horizontal 20)
   :managed [episode-list-search-bar-visible-state (atom false) :dispose nil]
   :watch [search-bar-visible episode-list-search-bar-visible-state]
   (m/Column
    .mainAxisSize m/MainAxisSize.min)
   .children
   [;; action buttons
    (m/Row
     .mainAxisAlignment m/MainAxisAlignment.start
     .children
     [(m/OutlinedButton.icon
       .label (m/Text "Follow")
       .icon (m/Icon m/Icons.add)
       .onPressed (fn []))
      (m/IconButton
       .icon (m/Icon m/Icons.more_vert_outlined)
       .onPressed (fn []))
      (m/IconButton
       .icon (m/Icon m/Icons.search)
       .onPressed (partial swap! episode-list-search-bar-visible-state not))
      (m/IconButton
       .icon (m/Icon m/Icons.sort)
       .onPressed (partial show-episode-list-query-sort-bottomsheet cx episode-list-query-state))
      (m/IconButton
       .icon (m/Icon m/Icons.filter_alt_outlined)
       .onPressed (partial show-episode-list-query-filter-bottomsheet cx episode-list-query-state))])
;; search bar
    (f/widget
     :managed [text-edit-controller (m/TextEditingController)
               focus-node (m/FocusNode)]
     (m/Visibility
      .visible search-bar-visible)
     (m/TextField
      .controller text-edit-controller
      .focusNode focus-node
      .autofocus true
      .onChanged (fn [v]
                   (swap! episode-list-query-state assoc :q-search v))
      .onTap (fn [] (.requestFocus focus-node))
      .onTapOutside (fn [event] (.unfocus focus-node))
      .decoration (m/InputDecoration
                   .hintText "Search episode"
                   .prefixIcon (m/Icon m/Icons.search)
                   .suffixIcon (m/GestureDetector
                                .onTap (fn []
                                         (.-text! text-edit-controller "") ;; can not trigger onChange, so we manually trigger the handler
                                         (swap! episode-list-query-state assoc :q-search "")
                                         nil)
                                .child (m/Icon m/Icons.close))
                   .filled true .isDense false
                   .contentPadding (m/EdgeInsets.all 0)
                   .border (m/OutlineInputBorder
                            .borderRadius (m/BorderRadius.all (m/Radius.circular 8))
                            .borderSide m/BorderSide.none
                            .gapPadding 0.0))))]))

(defonce episode-list-query-sort-options
  [{:kw :sort-default
    :display-text "Default"
    :sort-fn identity}
   {:kw :sort-latest-first
    :display-text "Latest first"
    :sort-fn identity}
   {:kw :sort-earliest-frist
    :display-text "Earliest first"
    :sort-fn identity}
   {:kw :sort-alphabet-A-Z
    :display-text "Alphabetical A-Z"
    :sort-fn (partial sort-by :title)}
   {:kw :sort-alphabet-Z-A
    :display-text "Alphabetical Z-A"
    :sort-fn (partial sort-by :title #(compare %2 %1))}])

(defonce episode-list-query-filter-options
  [{:kw :filter-none :display-text "None"}
   {:kw :filter-started :display-text "Started"}
   {:kw :filter-played :display-text "Played"}
   {:kw :filter-unplayed :display-text "Unplayed"}])

(defn show-episode-list-query-sort-bottomsheet
  "Show podcast episode list query sort bottomsheet"
  [cx episode-list-query-state]
  (m/showModalBottomSheet
   .context cx
   .showDragHandle true .isScrollControlled false
   .builder
   (fn [cx]
     (bottomsheet-selection-view
      :header "Sort episode"
      :items episode-list-query-sort-options
      :testSelected (partial = (:q-sort @episode-list-query-state))
      :onSelected (fn [kw]
                    (swap! episode-list-query-state assoc :q-sort kw)
                    (m/Navigator.pop cx))))))

(defn show-episode-list-query-filter-bottomsheet
  "Show podcast episode list query filter bottomsheet"
  [cx episode-list-query-state]
  (m/showModalBottomSheet
   .context cx
   .showDragHandle true .isScrollControlled false
   .builder
   (fn [cx]
     (bottomsheet-selection-view
      :header "Filter episode"
      :items episode-list-query-filter-options
      :testSelected (partial = (:q-filter @episode-list-query-state))
      :onSelected (fn [kw]
                    (swap! episode-list-query-state assoc :q-filter kw)
                    (m/Navigator.pop cx))))))

(defn bottomsheet-selection-view
  "Creaet common bottomsheet selection view"
  [& {:keys [header items testSelected onSelected]}]
  (f/widget
   :context cx
   :get {{:flds [style]} m/DefaultTextStyle}
   :let [header-text-style (.apply style
                                   .fontWeightDelta 2
                                   .fontSizeFactor 2)
         text-style (.apply style
                            .fontWeightDelta 1
                            .fontSizeFactor 1)
         header-view (m/Container
                      .alignment m/Alignment.center
                      .child (m/Text header .style header-text-style))]
   :padding (m/EdgeInsets.symmetric .horizontal 20)
   (m/ListView.separated
    .physics (m/ClampingScrollPhysics)
    .shrinkWrap true
    .itemCount (inc (count items))
    .separatorBuilder (constantly (m/Divider))
    .itemBuilder
    (fn [cx i]
      (case i
        0 header-view
        (let [{:keys [kw display-text]} (items (dec i))]
          (m/ListTile
           .onTap (partial onSelected kw)
           .leading (m/Text display-text .style text-style)
           .trailing (when (testSelected kw) (m/Icon m/Icons.check)))))))))

(defn episode-list-view
  "Create podcast episode list view"
  [episode-list-state episode-list-query-state]
  (f/widget
   :watch [{:keys [episode-list]} episode-list-state
           {:keys [q-sort q-filter q-search]} episode-list-query-state]
   :let [_ (log "[episode-list-view]..." ":episode-list" (count episode-list) ":episode-list-query" @episode-list-query-state)
         search-fn (partial filter (comp #(clojure.string/includes? % q-search) :title))
         sort-fn (->> episode-list-query-sort-options (filter (comp (partial = q-sort) :kw)) first :sort-fn)
         items (->> episode-list
                    search-fn
                    sort-fn
                    (into []))
         _ (log "[episode-list-view]!!!" ":episode-list" (count items))]
   (m/SliverList.builder
    .itemCount (count items)
    .itemBuilder
    (fn [cx i]
      (episode-list-item-view (items i))))))

(defn episode-list-item-view
  "Create podcast episode list item view"
  [{:keys [title pub-date duration image description] :as episode}]
  (f/widget
   (m/ExpansionTile
    .leading (tile-image-view image)
    .title (m/Text title)
    .subtitle (m/Text (str (i/format-episode-pub-date pub-date) " • " (i/format-episode-duration duration)))
    .trailing (episode-list-item-play-button-view)
    .childrenPadding (m/EdgeInsets.symmetric .horizontal 20 .vertical 0))
   .children
   [(m/Text description .maxLines 5 .overflow m/TextOverflow.ellipsis)
    (episode-list-item-actions-view episode)]))

(defn episode-list-item-play-button-view
  "Creae episode list item play/pause button view"
  []
  (f/widget
   :vsync vsync
   :managed [episode-playing-state (atom false) :dispose nil]
   :watch [is-playing episode-playing-state]
   :let [animation-duration (Duration .milliseconds 400)]
   :managed [animation-controller (m/AnimationController .vsync vsync .duration animation-duration  .reverseDuration animation-duration)]
   :let [_ (if is-playing (.forward animation-controller) (.reverse animation-controller))]
   (m/IconButton.outlined
    .onPressed (fn []
                 (if (swap! episode-playing-state not)
                   (.forward animation-controller)
                   (.reverse animation-controller))
                 nil))
   .icon
   (m/AnimatedIcon
    .icon m/AnimatedIcons.play_pause
    .progress animation-controller)))

(defn episode-list-item-action-view
  "Create episode list item action view"
  [& {:keys [onTap children]}]
  (f/widget
   (m/GestureDetector
    .onTap onTap)
   (m/Column
    .mainAxisSize m/MainAxisSize.min)
   .children children))

(defn episode-list-item-download-action-view
  "Create episode list item download action view"
  []
  (f/widget
   :managed [episode-download-state (atom {:download-status :not-downloaded :download-progress 0}) :dispose nil]
   :watch [{:keys [download-status download-progress]} episode-download-state]
   :managed [sub (-> (Stream/periodic (Duration .seconds 1) identity)
                     (.listen
                      (fn [_]
                        (let [s (swap! episode-download-state update :download-progress (partial + 10))]
                          (when (< 100 (:download-progress s))
                            (swap! episode-download-state assoc :download-status :downloaded)))))
                     (doto (.pause)))
             :dispose .cancel]
   :let [on-tap (fn []
                  (swap! episode-download-state
                         (fn [old]
                           (condp = (:download-status old)
                                 ;; start downloading 
                             :not-downloaded (do (.resume sub) (assoc old :download-status :downloading))
                                 ;; stop downloading
                             :downloading (do (.pause sub) (assoc old :download-status :not-downloaded))
                                ;; delete and reset
                             :downloaded (do (.pause sub) (assoc old :download-progress 0 :download-status :not-downloaded)))))
                  nil)
         children (condp = download-status
                    :not-downloaded [(m/Icon m/Icons.download) (m/Text "Download")]
                    :downloading [(m/Stack
                                   .alignment m/Alignment.center
                                   .children
                                   [(m/CircularProgressIndicator.adaptive .value (/ download-progress 100))
                                    (m/Text (str download-progress))])
                                  (m/SizedBox .width 0 .height 0)]
                    :downloaded [(m/Icon m/Icons.delete) (m/Text "Delete")])]

   (episode-list-item-action-view
    :onTap on-tap
    :children children)))

(defn episode-list-item-actions-view
  "Create podcast episode list item expansion actions view"
  [episode]
  (f/widget
   :context cx
   :let [actions [(episode-list-item-download-action-view)
                  (episode-list-item-action-view
                   :children
                   [(m/Icon m/Icons.add)
                    (m/Text "Add")])
                  (episode-list-item-action-view
                   :onTap (fn [])
                   :children
                   [(m/Icon m/Icons.check)
                    (m/Text "Mark Played")])
                  (episode-list-item-action-view
                   :onTap (partial show-episode-list-item-bottomsheet cx episode)
                   :children
                   [(m/Icon m/Icons.expand)
                    (m/Text "More")])]]
   (m/Row
    .mainAxisAlignment m/MainAxisAlignment.spaceBetween)
   .children
   (for [a actions]
     (m/Expanded .flex 1 .child a))))

(defn show-episode-list-item-bottomsheet
  "Show podcast episode list item bottomsheet"
  [cx episode]
  (m/showModalBottomSheet
   .context cx
   .showDragHandle true .isScrollControlled true
   .builder (fn [cx] (episode-list-item-bottomsheet-content-view episode))))

(defn episode-list-item-bottomsheet-content-view
  "Create podcast episode list item bottomsheet content view"
  [{:keys [title description]}]
  (f/widget
   :context cx
   :get {{:flds [style]} m/DefaultTextStyle}
   :padding (m/EdgeInsets.symmetric .horizontal 20)
   :let [text-style (.apply style
                            .fontWeightDelta 2
                            .fontSizeFactor 2)]
   (m/DraggableScrollableSheet
    .initialChildSize 0.5
    .expand false
    .builder
    (fn [cx scroll-controller]
      (f/widget
       (m/ScrollConfiguration
         ;; make child widget's physics work
        .behavior (.copyWith (m/ScrollBehavior) .overscroll false))
       (m/SingleChildScrollView
        .physics (m/ClampingScrollPhysics)
        .controller scroll-controller)
       (m/Column)
       .children
       [(m/Text title .style text-style)
        (m/SizedBox .height 20)
        (render-html description)])))))

;;------;;
;; main ;;
;;------;;

(defn main
  "Main: program entrypoint"
  []
  (f/run
   :managed [dark-mode-state (atom false) :dispose nil]
   :bind {:dark-mode-state dark-mode-state}
   :watch [is-dark-mode dark-mode-state]
   (m/MaterialApp.router
    .title app-name
    .debugShowCheckedModeBanner false
    .theme (m/ThemeData.light .useMaterial3 true)
    .darkTheme (m/ThemeData.dark .useMaterial3 true)
    .themeMode (case is-dark-mode
                 false (m/ThemeMode.light)
                 true (m/ThemeMode.dark))
    .routerConfig router)))
