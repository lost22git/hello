(ns lost.clojureflutter-demo
  (:require ["package:flutter/material.dart" :as m :refer [Key DismissDirection Theme ThemeData ThemeMode Icons NavigationDestinationLabelBehavior Colors Alignment BorderRadius HitTestBehavior]]
            ["package:fluttertoast/fluttertoast.dart" :as t]
            ["package:easy_refresh/easy_refresh.dart" :as er]
            ["package:go_router/go_router.dart" :refer [GoRouter GoRoute]]
            [cljd.flutter :as f]))

(defn get-primary-color
  "Get primary color of theme"
  [cx]
  (-> (Theme.of cx) (.-colorScheme) (.-primary)))

(defn vec-del
  "Delete item of given index from Vec"
  [col index]
  (persistent!
   (reduce conj! (transient (vec (subvec col 0 index))) (subvec col (inc index) (count col)))))

(defn toast
  "Toast some messages"
  [msg]
  (t/Fluttertoast.showToast .msg msg)
  nil)

(defonce app-name "ClojureDart Flutter Demo")

(defonce ^:private router
  (GoRouter
   .routes
   [(GoRoute .path "/" .builder (fn [cx state] (home-page)))]))

;;-------;;
;; state ;;
;;-------;;

(defonce ^:private app-state (atom {:theme-mode ThemeMode.light}))
(defonce ^:private navibar-state (atom {:current-index 0}))
(defonce ^:private podcast-list-state (atom {:data []}))

;;---------------;;
;; state updater ;;
;;---------------;;

(defn compute-theme-mode
  "Compute theme mode by given theme mode"
  [mode]
  (condp = mode
    ThemeMode.dark ThemeMode.light
    ThemeMode.light ThemeMode.dark))

(defn switch-theme-mode
  "Switch theme mode"
  [current-mode]
  (swap! app-state assoc :theme-mode (compute-theme-mode current-mode)))

(defn navibar-switch-index
  "Switch navibar by index"
  [current-index]
  (swap! navibar-state assoc  :current-index current-index))

(defn podcast-list-del
  "Delete podcast by index from data"
  [data index]
  (swap! podcast-list-state assoc :data (vec-del data index)))

(defn podcast-list-fetch-data
  "Fetching podcast list data"
  []
  (->> (range) (take 40)
       (map (fn [i]
              {:image (str "image#" i)
               :title (str "title#" i)
               :subtitle (str "subtitle#" i)}))
       (into [])))

(defn podcast-list-refresh-data
  "Refresh podcast list data"
  []
  (let [data (podcast-list-fetch-data)]
    (swap! podcast-list-state assoc :data data)))

;;------;;
;; view ;;
;;------;;

(defn theme-mode-switch-view
  "Create theme mode switch view"
  []
  (f/widget
   :watch [{:keys [theme-mode]} app-state]
   (m/IconButton
    .onPressed (partial switch-theme-mode theme-mode)
    .icon (condp = theme-mode
            ThemeMode.dark (m/Icon Icons.dark_mode)
            ThemeMode.light (m/Icon Icons.light_mode)))))

(defn navibar-view
  "Create navigationbar view"
  []
  (f/widget
   :watch [{:keys [current-index]} navibar-state]
   (m/NavigationBar
    .labelBehavior NavigationDestinationLabelBehavior.alwaysShow
    .selectedIndex current-index
    .onDestinationSelected (partial navibar-switch-index)
    .destinations [(m/NavigationDestination .icon (m/Icon Icons.audiotrack) .label "library")
                   (m/NavigationDestination .icon (m/Icon Icons.explore) .label "explore")
                   (m/NavigationDestination .icon (m/Icon Icons.download) .label "download")])))

(defn podcast-avatar-view
  "Craete podcast avatar view"
  [{:keys [image]}]
  (f/widget
   :context cx
   (m/ClipRRect
    .borderRadius (BorderRadius.circular 6.0))
   (m/Container
    .color (get-primary-color cx)
    .height 80 .width 80
    .alignment Alignment.center)
   (m/Text image)))

(defn podcast-list-view
  "Create podcast list view"
  []
  (f/widget
   :watch [{:keys [data]} podcast-list-state]
   (m/ListView.builder
    .itemCount (count data)
    .itemBuilder
    (fn [cx i]
      (f/widget
       :let [podcast (data i)]
       (m/Dismissible
        .key (Key (podcast :title))
        .direction DismissDirection.endToStart
         ; .background (m/Container .color (get-primary-color cx))
        .onDismissed (fn [_direction] (podcast-list-del data i) nil))
       (m/ListTile
        .title (m/Text (podcast :title))
        .subtitle (m/Text (podcast :subtitle))
        .leading (podcast-avatar-view podcast)
        .onTap (partial toast (str "tile #" i " tap!"))))))))

(defn podcast-list-easy-refresh-view
  "Create podcast list easy_refresh view"
  []
  (f/widget
   :managed [controller (er/EasyRefreshController)]
   (er/EasyRefresh
    .controller controller
    .header (er/ClassicHeader)
    .footer (er/ClassicFooter)
    .refreshOnStart true
    .onRefresh podcast-list-refresh-data
    .child (podcast-list-view))))

;;------;;
;; page ;;
;;------;;

(defn home-page
  "Create home page"
  []
  (m/Scaffold
   .appBar
   (m/AppBar
    .title (m/Text app-name)
    .actions [(theme-mode-switch-view)])
   .bottomNavigationBar (navibar-view)
   .body (m/Center .child (podcast-list-easy-refresh-view))))

;;------;;
;; main ;;
;;------;;

(defn main
  "Main: program entrypoint"
  []
  (f/run
   :watch [{:keys [theme-mode]} app-state]
   (m/MaterialApp.router
    .title app-name
    .debugShowCheckedModeBanner false
    .theme (ThemeData.light)
    .darkTheme (ThemeData.dark)
    .themeMode theme-mode
    .routerConfig router)))
